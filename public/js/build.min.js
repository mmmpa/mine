(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var Context;

module.exports = Context = {};

Context.GameContext = require('./contexts/game');

Context.SettingContext = require('./contexts/setting');


},{"./contexts/game":2,"./contexts/setting":3}],2:[function(require,module,exports){
var GameContext,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

module.exports = GameContext = (function(superClass) {
  extend(GameContext, superClass);

  function GameContext() {
    return GameContext.__super__.constructor.apply(this, arguments);
  }

  GameContext.prototype.component = React.createClass({
    render: function() {
      return ce({
        $el: App.View.Game,
        config: this.props.config
      });
    }
  });

  GameContext.prototype.initState = function(props) {
    return props.table = this.createTable(props.config);
  };

  GameContext.prototype.expandComponentProps = function(props, state) {
    return {
      config: props.table
    };
  };

  GameContext.prototype.delegate = function(subscribe) {
    GameContext.__super__.delegate.apply(this, arguments);
    subscribe('back', (function(_this) {
      return function() {
        return _this.props.router.popContext();
      };
    })(this));
    subscribe('cell:rightClick', (function(_this) {
      return function(cell) {
        cell.rotateMode();
        return _this.update(function(state) {
          return {
            config: state.config
          };
        });
      };
    })(this));
    subscribe('cell:leftClick', (function(_this) {
      return function(cell) {
        cell.open();
        return _this.update(function(state) {
          return {
            config: state.config
          };
        });
      };
    })(this));
    subscribe('cell:leftRightClick', (function(_this) {
      return function(cell) {
        cell.openAround();
        return _this.update(function(state) {
          return {
            config: state.config
          };
        });
      };
    })(this));
    subscribe('restart', (function(_this) {
      return function() {
        _this.props.table = _this.createTable(_this.props.config);
        return _this.update(function(state) {
          return {
            config: state.config
          };
        });
      };
    })(this));
    return subscribe('timer', (function(_this) {
      return function() {
        _this.props.table.computeTime();
        return _this.update(function(state) {
          return {
            config: state.config
          };
        });
      };
    })(this));
  };

  GameContext.prototype.createTable = function(dat) {
    return new App.Model.Table(dat.width, dat.height, dat.bombs);
  };

  return GameContext;

})(Arda.Context);


},{}],3:[function(require,module,exports){
var SettingContext,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

module.exports = SettingContext = (function(superClass) {
  extend(SettingContext, superClass);

  function SettingContext() {
    return SettingContext.__super__.constructor.apply(this, arguments);
  }

  SettingContext.prototype.component = React.createClass({
    render: function() {
      return ce({
        $el: App.View.Configuration
      });
    }
  });

  SettingContext.prototype.initState = function(props) {
    return props;
  };

  SettingContext.prototype.expandComponentProps = function(props, state) {
    return {
      config: state.config
    };
  };

  SettingContext.prototype.delegate = function(subscribe) {
    SettingContext.__super__.delegate.apply(this, arguments);
    subscribe('preset', (function(_this) {
      return function(dat) {
        return _this.props.router.pushContext(App.Context.GameContext, {
          router: _this.props.router,
          config: dat
        });
      };
    })(this));
    return subscribe('freestyle', (function(_this) {
      return function(dat) {
        return _this.props.router.pushContext(App.Context.GameContext, {
          router: _this.props.router,
          config: dat
        });
      };
    })(this));
  };

  return SettingContext;

})(Arda.Context);


},{}],4:[function(require,module,exports){
(function (global){
var App,
  slice = [].slice;

module.exports = App = {};

if (typeof window !== "undefined" && window !== null) {
  window.App = App;
  window.ce = function() {
    var args, ref;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return (ref = App.Util).ce.apply(ref, args);
  };
} else {
  global.App = App;
  global.ce = function() {
    var args, ref;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return (ref = App.Util).ce.apply(ref, args);
  };
}

App.Context = require('./context');

App.Util = require('./util');

App.Model = require('./model');

App.View = require('./view');

App.start = function(node) {
  var router;
  router = new Arda.Router(Arda.DefaultLayout, node);
  return router.pushContext(App.Context.SettingContext, {
    router: router
  });
};


}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./context":1,"./model":5,"./util":8,"./view":9}],5:[function(require,module,exports){
var Model;

module.exports = Model = {};

Model.Cell = require('./models/cell');

Model.Table = require('./models/table');


},{"./models/cell":6,"./models/table":7}],6:[function(require,module,exports){
var Cell,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

module.exports = Cell = (function() {
  Cell.status = {
    none: 'none',
    flag: 'flag',
    question: 'question',
    open: 'open'
  };

  Cell.prototype.state = null;

  Cell.prototype._counted = 0;

  Cell.prototype.blankMap = null;

  Cell.prototype.paled = false;

  function Cell(table, x, y) {
    this.table = table;
    this.x = x;
    this.y = y;
    this.countFlagsAround = bind(this.countFlagsAround, this);
    this.countBombsAround = bind(this.countBombsAround, this);
    this.blankMap = [this];
    this.position = this.table.width * this.y + this.x;
    this.state = Cell.status.none;
    this._bomb = false;
  }

  Cell.prototype.addAroundBlankCell = function(cell) {
    return this.blankMap.push(cell);
  };

  Cell.prototype.countBombsAround = function() {
    return this._counted != null ? this._counted : this._counted = this.table.countBombsAround(this);
  };

  Cell.prototype.countFlagsAround = function() {
    return this.table.countFlagsAround(this);
  };

  Cell.prototype.getDownCell = function() {
    return this.table.getPointCell(this.x, this.y + 1);
  };

  Cell.prototype.getLeftCell = function() {
    return this.table.getPointCell(this.x - 1, this.y);
  };

  Cell.prototype.getRightCell = function() {
    return this.table.getPointCell(this.x + 1, this.y);
  };

  Cell.prototype.getUpCell = function() {
    return this.table.getPointCell(this.x, this.y - 1);
  };

  Cell.prototype.hasBomb = function() {
    return this._bomb;
  };

  Cell.prototype.hasNoPal = function() {
    return this.blankMap.length === 1;
  };

  Cell.prototype.incrementAroundBombsCount = function() {
    return this._counted += 1;
  };

  Cell.prototype.isBlank = function() {
    return this._counted === 0;
  };

  Cell.prototype.isSafe = function() {
    return !this._bomb;
  };

  Cell.prototype.isSafeNotBlank = function() {
    return !this._bomb && !this.isBlank();
  };

  Cell.prototype.isFlagged = function() {
    return this.state === Cell.status.flag;
  };

  Cell.prototype.isOpened = function() {
    return this.state === Cell.status.open;
  };

  Cell.prototype.isOpenable = function() {
    return !this.isOpened() && this.state !== Cell.status.none;
  };

  Cell.prototype.installBomb = function() {
    this._bomb = true;
    return this.informBombExistence();
  };

  Cell.prototype.informBombExistence = function() {
    return this.table.informBombExistence(this);
  };

  Cell.prototype.pal = function(cell) {
    var i, len, myCell, ref;
    if (this.blankMap === cell.blankMap) {
      return;
    }
    if (this.blankMap.length === 1) {
      this.blankMap = cell.blankMap;
      return this.blankMap.push(this);
    } else if (cell.blankMap === 1) {
      this.blankMap.push(cell);
      return cell.blankMap = this.blankMap;
    } else {
      ref = this.blankMap;
      for (i = 0, len = ref.length; i < len; i++) {
        myCell = ref[i];
        cell.blankMap.push(myCell);
        myCell.blankMap = cell.blankMap;
      }
      return this.blankMap = cell.blankMap;
    }
  };

  Cell.prototype.detectPaling = function(cell) {
    if (this.isBlank()) {
      return this.palAround(cell);
    } else {
      return this.pal(cell);
    }
  };

  Cell.prototype.palAround = function(cell) {
    var d, l, r, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, u;
    if (this.paled) {
      return;
    }
    this.paled = true;
    d = this.getDownCell();
    u = this.getUpCell();
    l = this.getLeftCell();
    r = this.getRightCell();
    if (cell != null) {
      this.pal(cell);
    }
    if (l != null ? l.paled : void 0) {
      this.pal(l);
    }
    if (r != null ? r.paled : void 0) {
      this.pal(r);
    }
    if (d != null ? d.paled : void 0) {
      this.pal(d);
    }
    if (u != null ? u.paled : void 0) {
      this.pal(u);
    }
    if (l != null ? l.isSafeNotBlank() : void 0) {
      l.pal(this);
      if ((ref = l.getUpCell()) != null) {
        ref.detectPaling(this);
      }
      if ((ref1 = l.getDownCell()) != null) {
        ref1.detectPaling(this);
      }
    }
    if (r != null ? r.isSafeNotBlank() : void 0) {
      r.pal(this);
      if ((ref2 = r.getUpCell()) != null) {
        ref2.detectPaling(this);
      }
      if ((ref3 = r.getDownCell()) != null) {
        ref3.detectPaling(this);
      }
    }
    if (d != null ? d.isSafeNotBlank() : void 0) {
      d.pal(this);
      if ((ref4 = d.getLeftCell()) != null) {
        ref4.detectPaling(this);
      }
      if ((ref5 = d.getRightCell()) != null) {
        ref5.detectPaling(this);
      }
    }
    if (u != null ? u.isSafeNotBlank() : void 0) {
      u.pal(this);
      if ((ref6 = u.getLeftCell()) != null) {
        ref6.detectPaling(this);
      }
      return (ref7 = u.getRightCell()) != null ? ref7.detectPaling(this) : void 0;
    }
  };

  Cell.prototype.open = function() {
    if (this.table.isLocked()) {
      return;
    }
    if (this.isOpened() || this.isOpenable()) {
      return true;
    }
    this.state = Cell.status.open;
    return this.table.open(this);
  };

  Cell.prototype.openAround = function() {
    if (this.table.isLocked()) {
      return;
    }
    if (this.isOpened() && this.countBombsAround() === this.countFlagsAround()) {
      return this.table.openAround(this);
    }
  };

  Cell.prototype.rotateMode = function() {
    if (this.isOpened() || this.table.locked) {
      return;
    }
    this.state = (function() {
      switch (this.state) {
        case Cell.status.none:
          return Cell.status.flag;
        case Cell.status.flag:
          return Cell.status.question;
        case Cell.status.question:
          return Cell.status.none;
      }
    }).call(this);
    return this.table.computeRestBombsCount();
  };

  Cell.prototype.uninstallBomb = function() {
    return this._bomb = false;
  };

  return Cell;

})();


},{}],7:[function(require,module,exports){
var Table,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  slice = [].slice;

module.exports = Table = (function() {
  Table.status = {
    play: 'play',
    win: 'win',
    lose: 'lose'
  };

  Table.prototype.state = null;

  Table.prototype.calm = false;

  function Table(width, height, _bombsCount) {
    this.width = width;
    this.height = height;
    this._bombsCount = _bombsCount != null ? _bombsCount : 1;
    this.initCells = bind(this.initCells, this);
    if (this._bombsCount < 1) {
      throw 'no bombs';
    }
    if (this._bombsCount >= this.width * this.height) {
      throw 'over bombs';
    }
    this._cells = this.initCells();
    this.installBombs(this._bombsCount);
    this._startedTime = +new Date();
    this.passedTime = 0;
    this.restBomsCount = this._bombsCount;
    this._blankCellsCount = this._cells.length - this._bombsCount;
    this.state = Table.status.play;
  }

  Table.prototype.computeTime = function() {
    if (this.isLocked()) {
      return;
    }
    return this.passedTime = _((+new Date() - this._startedTime) / 1000).floor();
  };

  Table.prototype.countBombsAround = function(cell) {
    return _(this.getAroundUnopenedCells(cell)).filter(function(picked) {
      return picked.hasBomb();
    }).value().length;
  };

  Table.prototype.countFlagsAround = function(cell) {
    return _(this.getAroundUnopenedCells(cell)).filter(function(picked) {
      return picked.isFlagged();
    }).value().length;
  };

  Table.prototype.countFlaggedCell = function() {
    return _(this._cells).filter(function(picked) {
      return picked.isFlagged();
    }).value().length;
  };

  Table.prototype.countOpenedCell = function() {
    return _(this._cells).filter(function(picked) {
      return picked.isOpened();
    }).value().length;
  };

  Table.prototype.countRestBombs = function() {
    return this._bombsCount - this.countFlaggedCell();
  };

  Table.prototype.computeRestBombsCount = function() {
    return this.restBomsCount = this.countRestBombs();
  };

  Table.prototype.getAroundCellsBase = function(cell) {
    var i, ref, ref1, results;
    return _((function() {
      results = [];
      for (var i = ref = cell.y - 1, ref1 = cell.y + 1; ref <= ref1 ? i <= ref1 : i >= ref1; ref <= ref1 ? i++ : i--){ results.push(i); }
      return results;
    }).apply(this)).map((function(_this) {
      return function(y) {
        var i, ref, ref1, results;
        return _((function() {
          results = [];
          for (var i = ref = cell.x - 1, ref1 = cell.x + 1; ref <= ref1 ? i <= ref1 : i >= ref1; ref <= ref1 ? i++ : i--){ results.push(i); }
          return results;
        }).apply(this)).map(function(x) {
          return _this.getPointCell(x, y);
        }).value();
      };
    })(this)).flatten().compact();
  };

  Table.prototype.getAroundCells = function(cell) {
    return this.getAroundCellsBase(cell).value();
  };

  Table.prototype.getAroundUnopenedCells = function(cell) {
    return this.getAroundCellsBase(cell).select(function(cell) {
      return !cell.isOpened();
    }).value();
  };

  Table.prototype.getCells = function() {
    return this._cells;
  };

  Table.prototype.getPointCell = function(x, y) {
    if (x < 0 || y < 0 || x > this.width - 1 || y > this.height - 1) {
      return null;
    }
    return this.getPositionCell(y * this.width + x);
  };

  Table.prototype.getPositionCell = function(position) {
    return this._cells[position];
  };

  Table.prototype.informBombExistence = function(cell) {
    return _(this.getAroundCells(cell)).map(function(picked) {
      return picked.incrementAroundBombsCount();
    }).value();
  };

  Table.prototype.initCells = function() {
    var i, ref, results;
    return _((function() {
      results = [];
      for (var i = 0, ref = this.height - 1; 0 <= ref ? i <= ref : i >= ref; 0 <= ref ? i++ : i--){ results.push(i); }
      return results;
    }).apply(this)).map((function(_this) {
      return function(y) {
        var i, ref, results;
        return _((function() {
          results = [];
          for (var i = 0, ref = _this.width - 1; 0 <= ref ? i <= ref : i >= ref; 0 <= ref ? i++ : i--){ results.push(i); }
          return results;
        }).apply(this)).map(function(x) {
          return new App.Model.Cell(_this, x, y);
        }).value();
      };
    })(this)).flatten().value();
  };

  Table.prototype.installBombs = function(count) {
    var bombPositions, i, ref, results;
    bombPositions = _((function() {
      results = [];
      for (var i = 0, ref = this._cells.length - 1; 0 <= ref ? i <= ref : i >= ref; 0 <= ref ? i++ : i--){ results.push(i); }
      return results;
    }).apply(this)).sample(count).value();
    return this.installBombsManually.apply(this, bombPositions);
  };

  Table.prototype.installBombsManually = function() {
    var bombs;
    bombs = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    _(this._cells).map((function(_this) {
      return function(cell) {
        return cell.uninstallBomb();
      };
    })(this)).value();
    _(bombs).map((function(_this) {
      return function(position) {
        return _this.getPositionCell(position).installBomb();
      };
    })(this)).value();
    return _(this._cells).filter((function(_this) {
      return function(cell) {
        return cell.isBlank();
      };
    })(this)).map((function(_this) {
      return function(cell) {
        return cell.palAround();
      };
    })(this)).value();
  };

  Table.prototype.isLocked = function() {
    return this.locked;
  };

  Table.prototype.lock = function() {
    return this.locked = true;
  };

  Table.prototype.lose = function() {
    this.computeTime();
    this.state = Table.status.lose;
    _(this._bombsCount).map((function(_this) {
      return function(position) {
        return _this.getPositionCell(position).open();
      };
    })(this));
    return this.lock();
  };

  Table.prototype.open = function(opened) {
    if (this.isLocked()) {
      return;
    }
    if (opened.hasBomb()) {
      return this.lose();
    }
    if (this._blankCellsCount === this.countOpenedCell()) {
      return this.win();
    }
    if (!this.calm && opened.isBlank()) {
      this.calm = true;
      _(opened.blankMap).map(function(cell) {
        return cell != null ? cell.open() : void 0;
      }).value();
      return this.calm = false;
    }
  };

  Table.prototype.openAround = function(cell) {
    return _(this.getAroundUnopenedCells(cell)).map(function(around) {
      return around.open();
    }).value();
  };

  Table.prototype.unlock = function() {
    return this.locked = false;
  };

  Table.prototype.win = function() {
    this.computeTime();
    this.state = Table.status.win;
    return this.lock();
  };

  return Table;

})();


},{}],8:[function(require,module,exports){
var Util,
  slice = [].slice;

module.exports = Util = {

  /*
  React.createElementを変形
  
  ce(object)
    object.$cn -> className
    object.$el -> タグ名
    object.$inc -> 末尾引数、あるいは可変長引数として渡される値
    object -> 引数はそのままpropsとして渡される
  
  普通
  
     ce {$el: 'div', $cn: 'short', $inc: 'text'}
  
     <div className="short">
       text
     </div>
  
  入れ子
  
     Item = ReactClass
       render: ->
         ce {$el: 'li', $inc: 'item'}
  
     ce {$el: 'ul', $inc: [Item, Item]}
  
     <ul>
       {Item}
       {Item}
     </ul>
   */
  ce: function(object) {
    var child, children, i, len, results;
    switch (true) {
      case object != null ? object.hasOwnProperty('$el') : void 0:
        object.className = object.$cn;
        children = this.ce(object.$inc);
        if (_.isArray(children)) {
          return React.createElement.apply(React, [object.$el, object].concat(slice.call(children)));
        } else {
          return React.createElement(object.$el, object, children);
        }
        break;
      case _.isArray(object):
        results = [];
        for (i = 0, len = object.length; i < len; i++) {
          child = object[i];
          results.push(this.ce(child));
        }
        return results;
        break;
      case _.isString(object):
        return object;
      case _.isNumber(object):
        return object;
      case _.isObject(object):
        return object;
      default:
        return '';
    }
  }
};


},{}],9:[function(require,module,exports){
var View;

module.exports = View = {};

View.Table = require('./views/table');

View.Cell = require('./views/cell');

View.Fa = require('./views/fa');

View.Configuration = require('./views/configuration');

View.Preset = require('./views/preset');

View.Game = require('./views/game');


},{"./views/cell":10,"./views/configuration":11,"./views/fa":12,"./views/game":13,"./views/preset":14,"./views/table":15}],10:[function(require,module,exports){
var Cell;

module.exports = Cell = React.createClass({
  mixins: [Arda.mixin],
  render: function() {
    return ce({
      $el: 'li',
      $cn: this.genClasses(),
      ref: 'cell',
      $inc: this.genIncs()
    });
  },
  componentDidMount: function() {
    var cell;
    cell = React.findDOMNode(this.refs.cell);
    cell.addEventListener("contextmenu", this.onContextMenu);
    cell.addEventListener("mousedown", this.onMouseDown);
    return this.setState({
      cell: cell
    });
  },
  componentWillUnmount: function() {
    var cell;
    cell = this.state.cell;
    cell.removeEventListener("contextmenu", this.onContextMenu);
    return cell.removeEventListener("mousedown", this.onMouseDown);
  },
  genClasses: function() {
    var classes;
    classes = ['cell'];
    if (this.props.model.isOpened()) {
      classes.push('opened');
    }
    return classes.join(' ');
  },
  genIncs: function() {
    var count;
    if (!this.props.model.isOpened()) {
      return ce({
        $el: App.View.Fa,
        icon: this.props.model.state
      });
    }
    if (this.props.model.hasBomb()) {
      return ce({
        $el: App.View.Fa,
        icon: 'bomb'
      });
    } else {
      count = this.props.model.countBombsAround();
      if (count === 0) {
        return '';
      } else {
        return count;
      }
    }
  },
  onContextMenu: function(e) {
    return e.preventDefault();
  },
  onMouseDown: function(e) {
    e.preventDefault();
    if (e.buttons != null) {
      switch (e.buttons) {
        case 1:
          return this.dispatch('cell:leftClick', this.props.model);
        case 2:
          return this.dispatch('cell:rightClick', this.props.model);
        case 3:
          return this.dispatch('cell:leftRightClick', this.props.model);
        case 4:
          return this.dispatch('cell:middleClick', this.props.model);
      }
    } else if (e.button != null) {
      switch (e.button) {
        case 0:
          return this.dispatch('cell:leftClick', this.props.model);
        case 1:
          return this.dispatch('cell:middleClick', this.props.model);
        case 2:
          return this.dispatch('cell:rightClick', this.props.model);
      }
    } else {
      return this.dispatch('cell:leftClick', this.props.model);
    }
  }
});


},{}],11:[function(require,module,exports){
var Configuration;

module.exports = Configuration = React.createClass({
  mixins: [Arda.mixin],
  initialState: {
    width: 9,
    height: 9,
    bombs: 10
  },
  getInitialState: function() {
    return this.initialState;
  },
  render: function() {
    return ce({
      $el: 'div',
      $cn: 'container conf-page',
      $inc: [
        ce({
          $el: 'h1',
          $cn: 'main-title',
          $inc: 'No Mines Land'
        }), ce({
          $el: 'h1',
          $cn: 'conf-page title',
          $inc: 'プリセット'
        }), ce({
          $el: 'ul',
          $cn: 'conf-page preset-games',
          $inc: [
            ce({
              $el: App.View.Preset,
              preset: {
                name: '初級',
                dat: {
                  width: 9,
                  height: 9,
                  bombs: 10
                }
              }
            }), ce({
              $el: App.View.Preset,
              preset: {
                name: '中級',
                dat: {
                  width: 16,
                  height: 16,
                  bombs: 40
                }
              }
            }), ce({
              $el: App.View.Preset,
              preset: {
                name: '上級',
                dat: {
                  width: 30,
                  height: 16,
                  bombs: 99
                }
              }
            })
          ]
        }), ce({
          $el: 'h1',
          $cn: 'conf-page title',
          $inc: 'フリースタイル'
        }), ce({
          $el: 'ul',
          $cn: 'conf-page form-layout',
          $inc: [
            ce({
              $el: 'li',
              $cn: 'conf-page input-title-layout',
              $inc: [
                ce({
                  $el: 'label',
                  $cn: 'input-title conf-page',
                  $inc: '横'
                })
              ]
            }), ce({
              $el: 'li',
              $cn: 'conf-page input-layout',
              $inc: [
                ce({
                  $el: 'input',
                  $cn: 'form-control conf-page',
                  ref: 'width',
                  value: this.state.width,
                  onChange: this.genOnChangeValue('width')
                })
              ]
            }), ce({
              $el: 'li',
              $cn: 'conf-page input-title-layout',
              $inc: [
                ce({
                  $el: 'label',
                  $cn: 'input-title conf-page',
                  $inc: '縦'
                })
              ]
            }), ce({
              $el: 'li',
              $cn: 'conf-page input-layout',
              $inc: [
                ce({
                  $el: 'input',
                  $cn: 'form-control conf-page',
                  ref: 'height',
                  value: this.state.height,
                  onChange: this.genOnChangeValue('height')
                })
              ]
            }), ce({
              $el: 'li',
              $cn: 'conf-page input-title-layout',
              $inc: [
                ce({
                  $el: 'label',
                  $cn: 'input-title conf-page',
                  $inc: [
                    ce({
                      $el: App.View.Fa,
                      icon: 'bomb',
                      fixedWidth: true
                    })
                  ]
                })
              ]
            }), ce({
              $el: 'li',
              $cn: 'conf-page input-layout',
              $inc: [
                ce({
                  $el: 'input',
                  $cn: 'form-control conf-page',
                  ref: 'bombs',
                  value: this.state.bombs,
                  onChange: this.genOnChangeValue('bombs')
                })
              ]
            })
          ]
        }), ce({
          $el: 'button',
          $cn: 'btn btn-success conf-page wide',
          onClick: this.onClickFreeStyle,
          $inc: 'スタート'
        })
      ]
    });
  },
  genOnChangeValue: function(target) {
    return (function(_this) {
      return function(e) {
        var state, value;
        state = {};
        value = +e.target.value;
        state[target] = (function() {
          switch (true) {
            case _.isNaN(value):
              return this.initialState[target];
            case value < 1:
              return this.initialState[target];
            case _.isNumber(value):
              return value;
            default:
              return this.initialState[target];
          }
        }).call(_this);
        return _this.setState(state);
      };
    })(this);
  },
  onClickFreeStyle: function(e) {
    e.preventDefault();
    return this.dispatch('freestyle', {
      width: React.findDOMNode(this.refs.width).value,
      height: React.findDOMNode(this.refs.height).value,
      bombs: React.findDOMNode(this.refs.bombs).value
    });
  }
});


},{}],12:[function(require,module,exports){
var Fa;

module.exports = Fa = React.createClass({
  render: function() {
    var classes;
    classes = ['fa'];
    classes.push("fa-" + this.props.icon);
    if (this.props.scale != null) {
      classes.push("fa-" + this.props.scale + "x");
    }
    if (this.props.fixedWidth) {
      classes.push('fa-fw');
    }
    if (this.props.list) {
      classes.push('fa-li');
    }
    if (this.props.border) {
      classes.push('fa-border');
    }
    if (this.props.pull != null) {
      classes.push("fa-pull-" + this.props.pull);
    }
    if (this.props.animation != null) {
      classes.push("fa-" + this.props.animation);
    }
    if (this.props.rotate != null) {
      classes.push("fa-rotate-" + this.props.rotate);
    }
    if (this.props.flip != null) {
      classes.push("fa-flip-" + this.props.animation);
    }
    return ce({
      $el: 'i',
      $cn: classes.join(' ')
    });
  }
});


},{}],13:[function(require,module,exports){
var Game;

module.exports = Game = React.createClass({
  mixins: [Arda.mixin],
  render: function() {
    var table;
    table = this.props.config;
    return ce({
      $el: 'div',
      $inc: [
        ce({
          $el: 'h1',
          $cn: 'main-title',
          $inc: 'No Mines Land'
        }), ce({
          $el: 'header',
          $cn: 'game-page header',
          $inc: [
            ce({
              $el: 'div',
              $cn: 'game-page time',
              $inc: [table.passedTime]
            }), ce({
              $el: 'div',
              $cn: 'game-page restart',
              $inc: [
                ce({
                  $el: 'button',
                  $cn: "btn btn-" + (this.detectColor()) + " game-page wide",
                  onClick: this.onClickRestart,
                  $inc: [
                    ce({
                      $el: App.View.Fa,
                      icon: this.detectFace(),
                      scale: 2
                    })
                  ]
                })
              ]
            }), ce({
              $el: 'div',
              $cn: 'game-page rest',
              $inc: [table.restBomsCount]
            })
          ]
        }), ce({
          $el: 'div',
          $cn: 'clearfix',
          $inc: [
            ce({
              $el: App.View.Table,
              model: this.props.config
            })
          ]
        }), ce({
          $el: 'footer',
          $cn: 'game-page footer',
          $inc: [
            ce({
              $el: 'button',
              $cn: 'btn btn-success conf-page',
              onClick: this.onClickBack,
              $inc: [
                ce({
                  $el: App.View.Fa,
                  icon: 'chevron-circle-left'
                }), ' もどる'
              ]
            })
          ]
        })
      ]
    });
  },
  componentDidMount: function() {
    return this.sid = setInterval(((function(_this) {
      return function() {
        return _this.dispatch('timer');
      };
    })(this)), 1000);
  },
  componentWillUnmount: function() {
    return clearInterval(this.sid);
  },
  detectColor: function() {
    switch (this.props.config.state) {
      case App.Model.Table.status.play:
        return 'default';
      case App.Model.Table.status.win:
        return 'primary';
      case App.Model.Table.status.lose:
        return 'danger';
    }
  },
  detectFace: function() {
    switch (this.props.config.state) {
      case App.Model.Table.status.play:
        return 'meh-o';
      case App.Model.Table.status.win:
        return 'smile-o';
      case App.Model.Table.status.lose:
        return 'frown-o';
    }
  },
  onClickBack: function(e) {
    e.preventDefault();
    return this.dispatch('back');
  },
  onClickRestart: function(e) {
    e.preventDefault();
    return this.dispatch('restart');
  }
});


},{}],14:[function(require,module,exports){
var Preset;

module.exports = Preset = React.createClass({
  mixins: [Arda.mixin],
  render: function() {
    return ce({
      $el: 'li',
      $cn: 'conf-page preset',
      $inc: [
        ce({
          $el: 'button',
          $cn: 'btn btn-primary conf-page wide',
          onClick: this.onClick,
          $inc: this.props.preset.name
        })
      ]
    });
  },
  onClick: function(e) {
    e.preventDefault();
    return this.dispatch('preset', this.props.preset.dat);
  }
});


},{}],15:[function(require,module,exports){
var Table;

module.exports = Table = React.createClass({
  render: function() {
    return ce({
      $el: 'ul',
      $cn: 'table',
      $inc: this.genCells(),
      style: this.genStyles()
    });
  },
  genCells: function() {
    return _(this.props.model.getCells()).map(function(cell) {
      return ce({
        $el: App.View.Cell,
        model: cell
      });
    }).value();
  },
  genStyles: function() {
    return {
      width: this.props.model.width * 30
    };
  }
});


},{}]},{},[4])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
